-- Criação do banco de dados
CREATE DATABASE ControleCinemas3;
USE ControleCinemas3;

-- Tabela de Cinemas
CREATE TABLE Cinema (
    cinema_id INT PRIMARY KEY AUTO_INCREMENT,
    nome_fantasia VARCHAR(100) NOT NULL,
    endereco VARCHAR(200) NOT NULL,
    telefone VARCHAR(20),
    email VARCHAR(100),
    data_cadastro DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Tabela de Gêneros
CREATE TABLE Genero (
    genero_id INT PRIMARY KEY AUTO_INCREMENT,
    nome VARCHAR(50) NOT NULL,
    descricao TEXT
);

-- Tabela de Atores/Diretores (pessoa pode ser ambos)
CREATE TABLE Pessoa (
    pessoa_id INT PRIMARY KEY AUTO_INCREMENT,
    nome VARCHAR(100) NOT NULL,
    nacionalidade VARCHAR(50),
    data_nascimento DATE,
    tipo ENUM('Ator', 'Diretor', 'Ambos') NOT NULL
);

-- Tabela de Filmes
CREATE TABLE Filme (
    filme_id INT PRIMARY KEY AUTO_INCREMENT,
    titulo_original VARCHAR(100) NOT NULL,
    titulo_portugues VARCHAR(100),
    duracao_minutos INT NOT NULL,
    data_lancamento DATE,
    classificacao VARCHAR(20),
    diretor_id INT,
    FOREIGN KEY (diretor_id) REFERENCES Pessoa(pessoa_id)
);

-- Tabela de relação Filme-Gênero (M:N)
CREATE TABLE FilmeGenero (
    filme_id INT,
    genero_id INT,
    PRIMARY KEY (filme_id, genero_id),
    FOREIGN KEY (filme_id) REFERENCES Filme(filme_id),
    FOREIGN KEY (genero_id) REFERENCES Genero(genero_id)
);

-- Tabela de Elenco (Atores em Filmes)
CREATE TABLE Elenco (
    filme_id INT,
    ator_id INT,
    personagem VARCHAR(100),
    PRIMARY KEY (filme_id, ator_id),
    FOREIGN KEY (filme_id) REFERENCES Filme(filme_id),
    FOREIGN KEY (ator_id) REFERENCES Pessoa(pessoa_id)
);

-- Tabela de Salas
CREATE TABLE Sala (
    sala_id INT PRIMARY KEY AUTO_INCREMENT,
    cinema_id INT NOT NULL,
    numero INT NOT NULL,
    capacidade INT NOT NULL,
    tipo_tela VARCHAR(50),
    tipo_som VARCHAR(50),
    FOREIGN KEY (cinema_id) REFERENCES Cinema(cinema_id)
);

-- Tabela de Sessões
CREATE TABLE Sessao (
    sessao_id INT PRIMARY KEY AUTO_INCREMENT,
    filme_id INT NOT NULL,
    sala_id INT NOT NULL,
    data_hora DATETIME NOT NULL,
    valor_ingresso DECIMAL(10,2) NOT NULL,
    idioma VARCHAR(30),
    tipo_exibicao VARCHAR(30),
    FOREIGN KEY (filme_id) REFERENCES Filme(filme_id),
    FOREIGN KEY (sala_id) REFERENCES Sala(sala_id)
);

-- Tabela de Clientes (nova tabela para reservas)
CREATE TABLE Cliente (
    cliente_id INT PRIMARY KEY AUTO_INCREMENT,
    nome VARCHAR(100) NOT NULL,
    cpf VARCHAR(14) UNIQUE,
    email VARCHAR(100),
    telefone VARCHAR(20),
    data_cadastro DATETIME DEFAULT CURRENT_TIMESTAMP
);

-- Tabela de Reservas (nova tabela)
CREATE TABLE Reserva (
    reserva_id INT PRIMARY KEY AUTO_INCREMENT,
    sessao_id INT NOT NULL,
    cliente_id INT NOT NULL,
    data_reserva DATETIME DEFAULT CURRENT_TIMESTAMP,
    quantidade_ingressos INT NOT NULL,
    valor_total DECIMAL(10,2) NOT NULL,
    status ENUM('Pendente', 'Confirmada', 'Cancelada', 'Utilizada') DEFAULT 'Confirmada',
    codigo_reserva VARCHAR(20) UNIQUE,
    FOREIGN KEY (sessao_id) REFERENCES Sessao(sessao_id),
    FOREIGN KEY (cliente_id) REFERENCES Cliente(cliente_id)
);

-- Tabela de Tipos de Ingresso (nova tabela)
CREATE TABLE TipoIngresso (
    tipo_ingresso_id INT PRIMARY KEY AUTO_INCREMENT,
    nome VARCHAR(50) NOT NULL,
    descricao TEXT,
    percentual_acrescimo DECIMAL(5,2) DEFAULT 0.00
);

-- Tabela de Ingressos (nova tabela)
CREATE TABLE Ingresso (
    ingresso_id INT PRIMARY KEY AUTO_INCREMENT,
    reserva_id INT NOT NULL,
    tipo_ingresso_id INT NOT NULL,
    valor_pago DECIMAL(10,2) NOT NULL,
    codigo_barras VARCHAR(50) UNIQUE,
    utilizado BOOLEAN DEFAULT FALSE,
    FOREIGN KEY (reserva_id) REFERENCES Reserva(reserva_id),
    FOREIGN KEY (tipo_ingresso_id) REFERENCES TipoIngresso(tipo_ingresso_id)
);

-- Inserção de dados nas tabelas

-- Cinemas
INSERT INTO Cinema (nome_fantasia, endereco, telefone, email) VALUES
('CineArt Iguatemi', 'Av. João Wallig, 1800 - Porto Alegre', '(51) 3248-5400', 'iguatemi@cineart.com.br'),
('CineArt Barra', 'Av. Diário de Notícias, 300 - Porto Alegre', '(51) 3248-5500', 'barra@cineart.com.br'),
('Cinemark Bourbon', 'Rua Turiassu, 2100 - Porto Alegre', '(51) 4003-5212', 'bourbon@cinemark.com.br');

-- Gêneros
INSERT INTO Genero (nome, descricao) VALUES
('Ação', 'Filmes com muita ação e cenas de luta'),
('Drama', 'Filmes dramáticos e emocionantes'),
('Comédia', 'Filmes engraçados e leves'),
('Ficção Científica', 'Filmes com elementos científicos futuristas'),
('Terror', 'Filmes assustadores');

-- Pessoas (Atores e Diretores)
INSERT INTO Pessoa (nome, nacionalidade, data_nascimento, tipo) VALUES
('Christopher Nolan', 'Britânico', '1970-07-30', 'Diretor'),
('Leonardo DiCaprio', 'Americano', '1974-11-11', 'Ator'),
('Tom Hardy', 'Britânico', '1977-09-15', 'Ator'),
('Quentin Tarantino', 'Americano', '1963-03-27', 'Ambos'),
('Brad Pitt', 'Americano', '1963-12-18', 'Ator'),
('Margot Robbie', 'Australiana', '1990-07-02', 'Ator');

-- Filmes
INSERT INTO Filme (titulo_original, titulo_portugues, duracao_minutos, data_lancamento, classificacao, diretor_id) VALUES
('Inception', 'A Origem', 148, '2010-07-16', '12 anos', 1),
('Once Upon a Time in Hollywood', 'Era uma vez em... Hollywood', 161, '2019-08-15', '16 anos', 4),
('The Wolf of Wall Street', 'O Lobo de Wall Street', 180, '2013-12-25', '18 anos', NULL);

-- Atualizando diretor para O Lobo de Wall Street (não estava na lista inicial)
INSERT INTO Pessoa (nome, nacionalidade, data_nascimento, tipo) VALUES
('Martin Scorsese', 'Americano', '1942-11-17', 'Diretor');

UPDATE Filme SET diretor_id = 7 WHERE filme_id = 3;

-- Filme-Gênero
INSERT INTO FilmeGenero (filme_id, genero_id) VALUES
(1, 1), (1, 4), -- A Origem: Ação e Ficção Científica
(2, 1), (2, 2), (2, 3), -- Era uma vez em Hollywood: Ação, Drama e Comédia
(3, 2), (3, 3); -- O Lobo de Wall Street: Drama e Comédia

-- Elenco
INSERT INTO Elenco (filme_id, ator_id, personagem) VALUES
(1, 2, 'Dom Cobb'), -- Leonardo DiCaprio em A Origem
(1, 3, 'Eames'),    -- Tom Hardy em A Origem
(2, 5, 'Cliff Booth'), -- Brad Pitt em Era uma vez em Hollywood
(2, 2, 'Rick Dalton'), -- Leonardo DiCaprio em Era uma vez em Hollywood
(2, 6, 'Sharon Tate'), -- Margot Robbie em Era uma vez em Hollywood
(3, 2, 'Jordan Belfort'), -- Leonardo DiCaprio em O Lobo de Wall Street
(3, 6, 'Naomi Lapaglia'); -- Margot Robbie em O Lobo de Wall Street

-- Salas
INSERT INTO Sala (cinema_id, numero, capacidade, tipo_tela, tipo_som) VALUES
(1, 1, 120, 'IMAX', 'Dolby Atmos'),
(1, 2, 80, 'Digital', '5.1'),
(1, 3, 60, '3D', '5.1'),
(2, 1, 100, 'Digital', '7.1'),
(2, 2, 50, '3D', '5.1'),
(3, 1, 150, 'IMAX', 'Dolby Atmos'),
(3, 2, 90, 'Digital', '7.1'),
(3, 3, 70, '3D', '5.1'),
(3, 4, 40, 'VIP', '7.1');

-- Sessões
INSERT INTO Sessao (filme_id, sala_id, data_hora, valor_ingresso, idioma, tipo_exibicao) VALUES
(1, 1, '2023-06-20 14:00:00', 35.00, 'Legendado', 'IMAX'),
(1, 3, '2023-06-20 16:30:00', 28.00, 'Dublado', '3D'),
(2, 4, '2023-06-20 19:00:00', 25.00, 'Legendado', 'Digital'),
(2, 6, '2023-06-20 21:30:00', 30.00, 'Legendado', 'IMAX'),
(3, 8, '2023-06-20 18:00:00', 22.00, 'Dublado', '3D'),
(3, 9, '2023-06-20 21:00:00', 40.00, 'Legendado', 'VIP');

-- Tipos de Ingresso
INSERT INTO TipoIngresso (nome, descricao, percentual_acrescimo) VALUES
('Inteira', 'Ingresso padrão', 0.00),
('Meia-entrada', 'Para estudantes, idosos e outras categorias com direito', -50.00),
('VIP', 'Assentos premium com maior conforto', 30.00),
('Promocional', 'Ingressos com desconto promocional', -20.00);

-- Clientes
INSERT INTO Cliente (nome, cpf, email, telefone) VALUES
('João Silva', '123.456.789-00', 'joao.silva@email.com', '(51) 99999-9999'),
('Maria Oliveira', '987.654.321-00', 'maria.oliveira@email.com', '(51) 98888-8888'),
('Carlos Souza', '456.789.123-00', 'carlos.souza@email.com', '(51) 97777-7777');

-- Reservas
INSERT INTO Reserva (sessao_id, cliente_id, quantidade_ingressos, valor_total, status, codigo_reserva) VALUES
(1, 1, 2, 70.00, 'Confirmada', 'RES123456'),
(2, 2, 4, 112.00, 'Confirmada', 'RES654321'),
(3, 3, 1, 25.00, 'Confirmada', 'RES789012');

-- Ingressos
INSERT INTO Ingresso (reserva_id, tipo_ingresso_id, valor_pago, codigo_barras) VALUES
(1, 1, 35.00, 'ING12345678901'),
(1, 1, 35.00, 'ING12345678902'),
(2, 2, 14.00, 'ING23456789012'),
(2, 2, 14.00, 'ING23456789013'),
(2, 2, 14.00, 'ING23456789014'),
(2, 2, 14.00, 'ING23456789015'),
(3, 1, 25.00, 'ING34567890123');

-- Consultas adicionais para o sistema de reservas

-- 6. Listar todas as reservas de um cliente específico
SELECT 
    c.nome AS cliente,
    f.titulo_portugues AS filme,
    s.data_hora,
    cin.nome_fantasia AS cinema,
    sal.numero AS sala,
    r.quantidade_ingressos,
    r.valor_total,
    r.status,
    r.codigo_reserva
FROM Reserva r
JOIN Cliente c ON r.cliente_id = c.cliente_id
JOIN Sessao s ON r.sessao_id = s.sessao_id
JOIN Filme f ON s.filme_id = f.filme_id
JOIN Sala sal ON s.sala_id = sal.sala_id
JOIN Cinema cin ON sal.cinema_id = cin.cinema_id
WHERE c.cliente_id = 1;

-- 7. Verificar disponibilidade de assentos em uma sessão
SELECT 
    s.capacidade AS capacidade_total,
    IFNULL(SUM(r.quantidade_ingressos), 0) AS ingressos_vendidos,
    (s.capacidade - IFNULL(SUM(r.quantidade_ingressos), 0)) AS lugares_disponiveis
FROM Sessao ss
JOIN Sala s ON ss.sala_id = s.sala_id
LEFT JOIN Reserva r ON ss.sessao_id = r.sessao_id AND r.status != 'Cancelada'
WHERE ss.sessao_id = 1
GROUP BY s.capacidade;

-- 8. Relatório de vendas por cinema
SELECT 
    c.nome_fantasia AS cinema,
    COUNT(r.reserva_id) AS total_reservas,
    SUM(r.quantidade_ingressos) AS total_ingressos,
    SUM(r.valor_total) AS receita_total
FROM Reserva r
JOIN Sessao s ON r.sessao_id = s.sessao_id
JOIN Sala sa ON s.sala_id = sa.sala_id
JOIN Cinema c ON sa.cinema_id = c.cinema_id
WHERE r.status != 'Cancelada'
GROUP BY c.cinema_id
ORDER BY receita_total DESC;

-- 9. Detalhes de um ingresso específico
SELECT 
    i.codigo_barras,
    f.titulo_portugues AS filme,
    ss.data_hora,
    cin.nome_fantasia AS cinema,
    sal.numero AS sala,
    ti.nome AS tipo_ingresso,
    i.valor_pago,
    cl.nome AS cliente,
    i.utilizado
FROM Ingresso i
JOIN Reserva r ON i.reserva_id = r.reserva_id
JOIN Sessao ss ON r.sessao_id = ss.sessao_id
JOIN Filme f ON ss.filme_id = f.filme_id
JOIN Sala sal ON ss.sala_id = sal.sala_id
JOIN Cinema cin ON sal.cinema_id = cin.cinema_id
JOIN TipoIngresso ti ON i.tipo_ingresso_id = ti.tipo_ingresso_id
JOIN Cliente cl ON r.cliente_id = cl.cliente_id
WHERE i.ingresso_id = 1;

-- 10. Filmes mais populares por número de ingressos vendidos
SELECT 
    f.titulo_portugues AS filme,
    COUNT(i.ingresso_id) AS total_ingressos_vendidos,
    SUM(i.valor_pago) AS receita_total
FROM Ingresso i
JOIN Reserva r ON i.reserva_id = r.reserva_id
JOIN Sessao s ON r.sessao_id = s.sessao_id
JOIN Filme f ON s.filme_id = f.filme_id
WHERE r.status != 'Cancelada'
GROUP BY f.filme_id
ORDER BY total_ingressos_vendidos DESC;
